---
model:
  arch: 'resnet18'  # model architecture ['cnn_filters', 'cnn_resnet' 'resnet18', 'squeezenet', 'mobilenet']
  mode: 'regression'  # ['classification', 'regression']
  task: 'elevation'
  name: 'elevation_resnet_pre_wD0.01_1e-6_3kepochs_batch100_0.01Data_slidemix'  # name of training run/model
  model_fn: '' # path to .ckpt to resume training a model or for evaluating a trained model

training:
  lr: 1e-6
  weight_decay: 0.01
  beta1: 0.9  # default is 0.9
  lr_gamma:  # gamma for learning rate scheduler (decay rate factor), if empty: no scheduler
  epochs_start: 0
  epochs_end: 3000
  batch_size: 100
  shuffle: true
  augment: true
  augment_type: ['identity', 'flip', 'rotate']
    #['auto_contrast', 'equalize', 'color', 'solarize', 'posterize', 'contrast', 'brightness',
    #'sharpness', 'translateX', 'translateY', 'shearX', 'shearY', 'flip', 'rotate', 'erase',
    #'saturate', 'noise']
    # ['auto_imagenet', 'auto_cifar', 'auto_svhn', 'random', 'trivial'] - automated augmentation methods, set augment_random to false
  augment_random: true  # if true, randomly select one operation at random, o.w. perform every operation
  mixing_method: 'Sat-SlideMix'  # ['CutMix', 'Sat-CutMix', 'Sat-SlideMix', None]  cutmix_num_pairs: 3
  cutmix_alpha: 0.3  # 1 or 0.5 for beta, 0.25 for uniform
  num_workers: 2
  train: true
  val: true  # evaluate validation set
  test: false  # evaluate test set
  save_models: false  # save model params every 5 epochs

data:
  img_type: 'rgb'  # ['rgb', 'landsat']
  img_size: 256  # glcm: 11, ucMerced: 240,
  img_ext: 'png'
  bands: 3  # 1: grayscale, 3: rgb, -1: grayscale for ResNet
  num_classes: 1
  labels: '/elevation_CONTUS_16_640_UAR_100000_0_0.01data.npy' # path to label

eval:
  mse: true
  mae: true
  r2: true
  acc: false
  pr: false
  predictions: false  # get model predictions, post training
  post_training: false  # evalualate model post-training, must define model_fn
  model_weights: ''  # name of model for loading weights
  post_training_split: 'test'  # split to evaluate post training

# preprocessing code, usually only needed to format images
preprocessing:
  tif2npy: false  # set to true to convert tif images to npy
  csv2npy: false  # set to true to convert csv label files to npy
  calc_channel_means: false
  calc_channel_means_stdDevs: false
  split: 'train'  # split to calc means ['all' 'train', 'test', 'val']



